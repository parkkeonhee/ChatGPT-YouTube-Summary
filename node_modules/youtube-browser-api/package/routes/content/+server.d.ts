import { getDetails as getDetails, getContentPage } from './content';
import { getMarkers } from './marker';
import type { FirstFlatten, Return } from './types';
import { type Patch } from '../zero-api/fetch';
export type Single = {
    suggestions?: boolean;
    storyboard?: boolean;
    heatmapPath?: boolean;
    movingThumbnail?: boolean;
};
export type Multiple = {
    getDetails?: Return<typeof getDetails>;
    getContentPage?: Return<typeof getContentPage>;
    getMarkers?: Return<typeof getMarkers>;
};
type id = {
    id: string;
};
export type Params = id & Single & FirstFlatten<Multiple>;
type keys = Exclude<Exclude<keyof Params, undefined>, id>;
type params = [keys, ...keys[]];
export declare const GET: <P extends params>(event: {
    query: id & {
        params: P;
    };
}) => Promise<{
    body: {
        errors: {
            readonly id?: "Must be 11 characters" | undefined;
            readonly query?: "Empty or undefined parameters" | undefined;
        };
        message: string;
    };
    status: 400;
    ok: false;
} | (Omit<Omit<Response, "json">, "ok"> & {
    json: () => Promise<{ [key in P[number]]: {
        movingThumbnail?: string | undefined;
        storyboard?: {
            storyboard: {
                url: string[];
                parts: {
                    firstPart: string;
                    secondPart: string;
                };
                keys: {
                    sgp: string;
                    sigh: string | undefined;
                };
            };
            timeline: Record<"low" | "medium" | "high", {
                slot: {
                    templateUrl: string;
                    url: string;
                    thumbnailWidth: number;
                    thumbnailHeight: number;
                    thumbnailCount: number;
                    interval: number;
                    columns: number;
                    rows: number;
                    storyboardCount: number;
                };
                frames: {
                    rows: number;
                    columns: number;
                    url: string;
                    thumbnailCount: number;
                    width: number;
                    height: number;
                }[];
            }>;
        } | undefined;
        heatmapPath?: string | undefined;
        suggestions?: {
            id: string;
            type: string;
            thumbnail: import("../data/types/initial-data").Thumbnail5[];
            title: string;
            channelTitle: string;
            shortBylineText: string;
            length: import("../data/types/initial-data").LengthText;
            isLive: boolean;
        }[] | undefined;
        initialData?: import("../data/types/initial-data").InitialData | undefined;
        playerResponse?: import("../data/types/player-response").PlayerResponse | undefined;
        apiToken?: string | undefined;
        context?: import("../data/types/initial-data").Context | undefined;
        transcriptMeta?: {
            key: string | undefined;
            params: string | undefined;
            visitorData: string | undefined;
            sessionId: string | undefined;
            clickTrackingParams: string | undefined;
        } | undefined;
        auto_chapters?: import("../data/types/initial-data").Chapter[] | undefined;
        chapters?: import("../data/types/initial-data").Chapter[] | undefined;
        macro_chapters?: {
            chapter: import("../data/types/initial-data").RepeatChapterCommand2 | undefined;
            thumbnails: import("../data/types/initial-data").Thumbnail13[];
            title: import("../data/types/initial-data").Title11;
            description: import("../data/types/initial-data").TimeDescription;
        }[] | undefined;
        key_chapters?: {
            tittle: import("../data/types/initial-data").Title11;
            thumbnails: import("../data/types/initial-data").Thumbnail13[] | null | undefined;
            chapter: {
                startTimeMs: string;
                durationTimeMs: string;
            };
        }[] | undefined;
        heatmap?: import("../data/types/initial-data").HeatmapRenderer | undefined;
        title?: string | undefined;
        isLive?: boolean | undefined;
        channel?: string | undefined;
        description?: string | undefined;
    }[key & ("isLive" | "title" | "channel" | "description" | "initialData" | "playerResponse" | "apiToken" | "context" | "transcriptMeta" | "auto_chapters" | "chapters" | "macro_chapters" | "key_chapters" | "heatmap" | "suggestions" | "storyboard" | "heatmapPath" | "movingThumbnail")]; }>;
    ok: true;
})>;
export declare const _GET: <R extends params, P extends Patch>(query: id & {
    params: R;
} & P & Patch) => Promise<P extends {
    manual: true;
} ? {
    body: {
        errors: {
            readonly id?: "Must be 11 characters" | undefined;
            readonly query?: "Empty or undefined parameters" | undefined;
        };
        message: string;
    };
    status: 400;
    ok: false;
} | (Omit<Omit<Response, "json">, "ok"> & {
    json: () => Promise<{ [key in R[number]]: {
        movingThumbnail?: string | undefined;
        storyboard?: {
            storyboard: {
                url: string[];
                parts: {
                    firstPart: string;
                    secondPart: string;
                };
                keys: {
                    sgp: string;
                    sigh: string | undefined;
                };
            };
            timeline: Record<"low" | "medium" | "high", {
                slot: {
                    templateUrl: string;
                    url: string;
                    thumbnailWidth: number;
                    thumbnailHeight: number;
                    thumbnailCount: number;
                    interval: number;
                    columns: number;
                    rows: number;
                    storyboardCount: number;
                };
                frames: {
                    rows: number;
                    columns: number;
                    url: string;
                    thumbnailCount: number;
                    width: number;
                    height: number;
                }[];
            }>;
        } | undefined;
        heatmapPath?: string | undefined;
        suggestions?: {
            id: string;
            type: string;
            thumbnail: import("../data/types/initial-data").Thumbnail5[];
            title: string;
            channelTitle: string;
            shortBylineText: string;
            length: import("../data/types/initial-data").LengthText;
            isLive: boolean;
        }[] | undefined;
        initialData?: import("../data/types/initial-data").InitialData | undefined;
        playerResponse?: import("../data/types/player-response").PlayerResponse | undefined;
        apiToken?: string | undefined;
        context?: import("../data/types/initial-data").Context | undefined;
        transcriptMeta?: {
            key: string | undefined;
            params: string | undefined;
            visitorData: string | undefined;
            sessionId: string | undefined;
            clickTrackingParams: string | undefined;
        } | undefined;
        auto_chapters?: import("../data/types/initial-data").Chapter[] | undefined;
        chapters?: import("../data/types/initial-data").Chapter[] | undefined;
        macro_chapters?: {
            chapter: import("../data/types/initial-data").RepeatChapterCommand2 | undefined;
            thumbnails: import("../data/types/initial-data").Thumbnail13[];
            title: import("../data/types/initial-data").Title11;
            description: import("../data/types/initial-data").TimeDescription;
        }[] | undefined;
        key_chapters?: {
            tittle: import("../data/types/initial-data").Title11;
            thumbnails: import("../data/types/initial-data").Thumbnail13[] | null | undefined;
            chapter: {
                startTimeMs: string;
                durationTimeMs: string;
            };
        }[] | undefined;
        heatmap?: import("../data/types/initial-data").HeatmapRenderer | undefined;
        title?: string | undefined;
        isLive?: boolean | undefined;
        channel?: string | undefined;
        description?: string | undefined;
    }[key & ("isLive" | "title" | "channel" | "description" | "initialData" | "playerResponse" | "apiToken" | "context" | "transcriptMeta" | "auto_chapters" | "chapters" | "macro_chapters" | "key_chapters" | "heatmap" | "suggestions" | "storyboard" | "heatmapPath" | "movingThumbnail")]; }>;
    ok: true;
}) : Awaited<{ [key in R[number]]: {
    movingThumbnail?: string | undefined;
    storyboard?: {
        storyboard: {
            url: string[];
            parts: {
                firstPart: string;
                secondPart: string;
            };
            keys: {
                sgp: string;
                sigh: string | undefined;
            };
        };
        timeline: Record<"low" | "medium" | "high", {
            slot: {
                templateUrl: string;
                url: string;
                thumbnailWidth: number;
                thumbnailHeight: number;
                thumbnailCount: number;
                interval: number;
                columns: number;
                rows: number;
                storyboardCount: number;
            };
            frames: {
                rows: number;
                columns: number;
                url: string;
                thumbnailCount: number;
                width: number;
                height: number;
            }[];
        }>;
    } | undefined;
    heatmapPath?: string | undefined;
    suggestions?: {
        id: string;
        type: string;
        thumbnail: import("../data/types/initial-data").Thumbnail5[];
        title: string;
        channelTitle: string;
        shortBylineText: string;
        length: import("../data/types/initial-data").LengthText;
        isLive: boolean;
    }[] | undefined;
    initialData?: import("../data/types/initial-data").InitialData | undefined;
    playerResponse?: import("../data/types/player-response").PlayerResponse | undefined;
    apiToken?: string | undefined;
    context?: import("../data/types/initial-data").Context | undefined;
    transcriptMeta?: {
        key: string | undefined;
        params: string | undefined;
        visitorData: string | undefined;
        sessionId: string | undefined;
        clickTrackingParams: string | undefined;
    } | undefined;
    auto_chapters?: import("../data/types/initial-data").Chapter[] | undefined;
    chapters?: import("../data/types/initial-data").Chapter[] | undefined;
    macro_chapters?: {
        chapter: import("../data/types/initial-data").RepeatChapterCommand2 | undefined;
        thumbnails: import("../data/types/initial-data").Thumbnail13[];
        title: import("../data/types/initial-data").Title11;
        description: import("../data/types/initial-data").TimeDescription;
    }[] | undefined;
    key_chapters?: {
        tittle: import("../data/types/initial-data").Title11;
        thumbnails: import("../data/types/initial-data").Thumbnail13[] | null | undefined;
        chapter: {
            startTimeMs: string;
            durationTimeMs: string;
        };
    }[] | undefined;
    heatmap?: import("../data/types/initial-data").HeatmapRenderer | undefined;
    title?: string | undefined;
    isLive?: boolean | undefined;
    channel?: string | undefined;
    description?: string | undefined;
}[key & ("isLive" | "title" | "channel" | "description" | "initialData" | "playerResponse" | "apiToken" | "context" | "transcriptMeta" | "auto_chapters" | "chapters" | "macro_chapters" | "key_chapters" | "heatmap" | "suggestions" | "storyboard" | "heatmapPath" | "movingThumbnail")]; }>>;
export {};
