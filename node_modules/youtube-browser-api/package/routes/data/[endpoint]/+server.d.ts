import { GetListByKeyword } from '../keyword';
import { GetChannelById } from '../../content/channel';
import { GetSuggestData } from '../suggest';
import type { Param, Prettify } from '../../utility-types';
import { type Patch } from './../../zero-api/fetch';
declare const switchData: {
    readonly playlist: (params: {
        playlistId: string;
        limit: number;
    }) => Promise<{
        items: import("../../types").ITEM[];
        metadata: import("../types/initial-data").MetaData;
    } | undefined>;
    readonly channel: typeof GetChannelById;
    readonly suggestion: typeof GetSuggestData;
    readonly search: typeof GetListByKeyword;
};
type SwitchData = typeof switchData;
export type Params = Prettify<{
    [key in keyof SwitchData]?: Param<SwitchData[key]>;
}>;
export type Slug = keyof Params;
export type Query<S extends Slug> = Prettify<NonNullable<Params[S]>>;
export declare const GET: <S extends "channel" | "playlist" | "suggestion" | "search", Q extends NonNullable<{
    readonly playlist?: {
        playlistId: string;
        limit: number;
    } | undefined;
    readonly channel?: {
        channelId: string;
    } | undefined;
    readonly suggestion?: {
        limit: number;
    } | undefined;
    readonly search?: {
        keyword: string;
        withPlaylist?: boolean | undefined;
        limit?: number | undefined;
        option?: "" | "channel" | "playlist" | "video" | "movie" | undefined;
    } | undefined;
}[S]> extends infer T ? { [K in keyof T]: NonNullable<{
    readonly playlist?: {
        playlistId: string;
        limit: number;
    } | undefined;
    readonly channel?: {
        channelId: string;
    } | undefined;
    readonly suggestion?: {
        limit: number;
    } | undefined;
    readonly search?: {
        keyword: string;
        withPlaylist?: boolean | undefined;
        limit?: number | undefined;
        option?: "" | "channel" | "playlist" | "video" | "movie" | undefined;
    } | undefined;
}[S]>[K]; } : never>(event: {
    params: {
        endpoint: S;
    };
    query: Q;
}) => Promise<{
    body: {
        errors: {
            readonly query?: "Invalid slug, should be either: playlist, channel, suggestion or search" | undefined;
        };
        message: string;
    };
    status: 400;
    ok: false;
} | (Omit<Omit<Response, "json">, "ok"> & {
    json: () => Promise<ReturnType<{
        readonly playlist: (params: {
            playlistId: string;
            limit: number;
        }) => Promise<{
            items: import("../../types").ITEM[];
            metadata: import("../types/initial-data").MetaData;
        } | undefined>;
        readonly channel: typeof GetChannelById;
        readonly suggestion: typeof GetSuggestData;
        readonly search: typeof GetListByKeyword;
    }[S]>>;
    ok: true;
})>;
export declare const _GET: <S extends "channel" | "playlist" | "suggestion" | "search", Q extends (NonNullable<{
    readonly playlist?: {
        playlistId: string;
        limit: number;
    } | undefined;
    readonly channel?: {
        channelId: string;
    } | undefined;
    readonly suggestion?: {
        limit: number;
    } | undefined;
    readonly search?: {
        keyword: string;
        withPlaylist?: boolean | undefined;
        limit?: number | undefined;
        option?: "" | "channel" | "playlist" | "video" | "movie" | undefined;
    } | undefined;
}[S]> extends infer T ? { [K in keyof T]: NonNullable<{
    readonly playlist?: {
        playlistId: string;
        limit: number;
    } | undefined;
    readonly channel?: {
        channelId: string;
    } | undefined;
    readonly suggestion?: {
        limit: number;
    } | undefined;
    readonly search?: {
        keyword: string;
        withPlaylist?: boolean | undefined;
        limit?: number | undefined;
        option?: "" | "channel" | "playlist" | "video" | "movie" | undefined;
    } | undefined;
}[S]>[K]; } : never) & Patch>(slug: S, query: Q & Patch) => Promise<Q extends {
    manual: true;
} ? {
    body: {
        errors: {
            readonly query?: "Invalid slug, should be either: playlist, channel, suggestion or search" | undefined;
        };
        message: string;
    };
    status: 400;
    ok: false;
} | (Omit<Omit<Response, "json">, "ok"> & {
    json: () => Promise<ReturnType<{
        readonly playlist: (params: {
            playlistId: string;
            limit: number;
        }) => Promise<{
            items: import("../../types").ITEM[];
            metadata: import("../types/initial-data").MetaData;
        } | undefined>;
        readonly channel: typeof GetChannelById;
        readonly suggestion: typeof GetSuggestData;
        readonly search: typeof GetListByKeyword;
    }[S]>>;
    ok: true;
}) : Awaited<ReturnType<{
    readonly playlist: (params: {
        playlistId: string;
        limit: number;
    }) => Promise<{
        items: import("../../types").ITEM[];
        metadata: import("../types/initial-data").MetaData;
    } | undefined>;
    readonly channel: typeof GetChannelById;
    readonly suggestion: typeof GetSuggestData;
    readonly search: typeof GetListByKeyword;
}[S]>>>;
export {};
