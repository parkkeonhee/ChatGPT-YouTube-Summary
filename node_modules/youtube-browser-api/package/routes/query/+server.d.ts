import type { MapSchema, PartialPage } from './flatten';
import { type Patch } from '../zero-api/fetch';
export type Query = {
    /**
     * YouTube videoID - eleven characters
     */
    id: string;
    /**
     * Describe your request on `JavaScript Object Notation (JSON)` syntax
     */
    schema: PartialPage;
    /**
     * Describe your request on dot.notaion style
     */
    paths?: string | string[];
    /**
     * By default will return closest leafs to the `picked` values
     *
     * Turn it on to receive the schema as you requested it
     * @default false
     */
    verbose?: boolean;
    /**
     * Enable to bypass typechecking.
     *
     * There are 4000+ base queries plus their combinations; recover your performance.
     *
     * Come help https://github.com/kauderk/youtube-browser-api/issues/1
     */
    tsAny?: boolean;
};
export declare const GET: <const Q extends Query>(event: Q) => Promise<{
    body: {
        errors: {
            readonly id?: "Must be 11 characters" | undefined;
            readonly query?: "paths or schema should be present and typed accordingly" | undefined;
        };
        message: "Visualize the query process https://excalidraw.com/#json=0hDFTajVxa2oO7s34kMef,M_jPO1x4IoE_Eqz2RGvPVA";
    };
    status: 400;
    ok: false;
} | (Omit<Omit<Response, "json">, "ok"> & {
    json: () => Promise<MapSchema<Q["schema"], Q["verbose"], Q["tsAny"]>>;
    ok: true;
})>;
export declare const _GET: <Q extends Query & Patch>(query: Q & Query & Patch) => Promise<{
    manual: Q["manual"];
} extends {
    manual: true;
} ? (Omit<Omit<Response, "json">, "ok"> & {
    json: () => Promise<MapSchema<Q["schema"], Q["verbose"], Q["tsAny"]>>;
    ok: true;
}) | {
    body: {
        errors: {
            readonly id?: "Must be 11 characters" | undefined;
            readonly query?: "paths or schema should be present and typed accordingly" | undefined;
        };
        message: "Visualize the query process https://excalidraw.com/#json=0hDFTajVxa2oO7s34kMef,M_jPO1x4IoE_Eqz2RGvPVA";
    };
    status: 400;
    ok: false;
} : MapSchema<Q["schema"], Q["verbose"], Q["tsAny"]>>;
