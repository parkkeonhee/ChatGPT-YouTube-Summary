import type { Prettify } from '../utility-types';
import { type Patch } from '../zero-api/fetch';
type Params = {
    playlistId?: string;
    videoId?: string;
};
export type Query = Prettify<Params>;
export declare const GET: <Q extends {
    playlistId?: string | undefined;
    videoId?: string | undefined;
}>(event: {}) => Promise<{
    body: {
        errors: {
            readonly query?: "Empty Params: try with a videoId or playlistId" | undefined;
        };
        message: string;
    };
    status: 400;
    ok: false;
} | (Omit<Omit<Response, "json">, "ok"> & {
    json: () => Promise<{ [key in keyof Q]: {
        videoId: void | import("./transcript").TranscriptResponse[];
        playlistId: void | (import("./transcript").TranscriptResponse[] | undefined)[];
    }[key & keyof Params]; }>;
    ok: true;
})>;
export declare const _GET: <Q extends {
    playlistId?: string | undefined;
    videoId?: string | undefined;
} & Patch>(query: Q & Patch) => Promise<Q extends {
    manual: true;
} ? {
    body: {
        errors: {
            readonly query?: "Empty Params: try with a videoId or playlistId" | undefined;
        };
        message: string;
    };
    status: 400;
    ok: false;
} | (Omit<Omit<Response, "json">, "ok"> & {
    json: () => Promise<{ [key in keyof Q]: {
        videoId: void | import("./transcript").TranscriptResponse[];
        playlistId: void | (import("./transcript").TranscriptResponse[] | undefined)[];
    }[key & keyof Params]; }>;
    ok: true;
}) : Awaited<{ [key in keyof Q]: {
    videoId: void | import("./transcript").TranscriptResponse[];
    playlistId: void | (import("./transcript").TranscriptResponse[] | undefined)[];
}[key & keyof Params]; }>>;
export {};
